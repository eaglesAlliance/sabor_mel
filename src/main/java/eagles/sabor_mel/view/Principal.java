package eagles.sabor_mel.view;


import eagles.sabor_mel.control.HashSha;
import eagles.sabor_mel.control.Mensagem;
import eagles.sabor_mel.control.Validation;
import eagles.sabor_mel.dao.BairroDAO;
import eagles.sabor_mel.dao.CidadeDAO;
import eagles.sabor_mel.dao.DocumentoDAO;
import eagles.sabor_mel.dao.EnderecoDAO;
import eagles.sabor_mel.dao.EstadoDAO;
import eagles.sabor_mel.dao.FuncionarioDAO;
import eagles.sabor_mel.dao.PessoaDAO;
import eagles.sabor_mel.dao.TelefoneDAO;
import eagles.sabor_mel.model.Acesso;
import eagles.sabor_mel.model.Bairro;
import eagles.sabor_mel.model.Cidade;
import eagles.sabor_mel.model.Documento;
import eagles.sabor_mel.model.Endereco;
import eagles.sabor_mel.model.Estado;
import eagles.sabor_mel.model.Funcionario;
import eagles.sabor_mel.model.Pessoa;
import eagles.sabor_mel.model.Sexo;
import eagles.sabor_mel.model.Telefone;
import eagles.sabor_mel.model.TipoDocumento;
import eagles.sabor_mel.model.TipoTelefone;
import java.awt.CardLayout;
import java.awt.Color;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author etivideo
 */
public class Principal extends javax.swing.JFrame {
    /*Variavel global para definir as ações do operador*/
    public static String acao = "";
    
    /**
     * Creates new form Principal
     */
    public Principal() {
        //Login.permitir = true;
        
        if(Login.permitir){
            initComponents();
            if(Login.nivelAcesso.equals("Vendedor")){
                btnCompra.setVisible(false);
                btnRelatorio.setVisible(false);
                btnFornecedor.setVisible(false);
                btnUsuario.setVisible(false);
            }
            logado.setText("Usuário: "+Login.nome);
            this.setExtendedState(this.MAXIMIZED_BOTH); 
            carregaComboEstados();
            carregaUsuarios();
            redefineEstilo();
        }
        else{
            JOptionPane.showMessageDialog(null, "Permissão Negada.... ");
            new Login().setVisible(true);
            this.dispose();
            //System.exit(0);
        }
        
        
    }

    public void carregaComboEstados() {
        EstadoDAO estadoDAO = new EstadoDAO();
        List<Estado> listDaoEstados = estadoDAO.findAll();
        
        for(int i = 0; i < listDaoEstados.size(); i++){
            estados.addItem(listDaoEstados.get(i).getUf());
        }
    }

    public void redefineEstilo() {
        acessos.setBackground(Color.white);
        estados.setBackground(Color.white);
        sexo.setBackground(Color.white);
        
        checkSenha.setVisible(false);
        delete.setVisible(false);
        confirm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/checked (1).png")));
        labelTelefone2.setVisible(false);
        ddd2.setVisible(false);
        telefone2.setVisible(false);
        delTel2.setVisible(false);
        labelTelefone3.setVisible(false);
        ddd3.setVisible(false);
        telefone3.setVisible(false);
        delTel3.setVisible(false);
        mensagem.setHorizontalAlignment(SwingConstants.RIGHT);
    }

    public void carregaUsuarios() {
        
        FuncionarioDAO dao = new FuncionarioDAO();
        List<Funcionario> funcionarios = dao.findAll();
        ((DefaultTableModel)tabelaUsuario.getModel()).setNumRows(0);
        for(int i = 0; i < funcionarios.size(); i++){
            String acesso = funcionarios.get(i).getAcesso().toString();
            
            ((DefaultTableModel)tabelaUsuario.getModel()).addRow(new String[]{
                funcionarios.get(i).getIdPessoa().toString(),
                funcionarios.get(i).getNome(),
                funcionarios.get(i).getUsuario(), 
                acesso
            });
            
            confirm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/checked (1).png")));
            delete.setVisible(false);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logo = new javax.swing.JLabel();
        btnVenda = new javax.swing.JButton();
        btnCliente = new javax.swing.JButton();
        btnProduto = new javax.swing.JButton();
        btnCompra = new javax.swing.JButton();
        btnRelatorio = new javax.swing.JButton();
        btnFornecedor = new javax.swing.JButton();
        btnUsuario = new javax.swing.JButton();
        eagles = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        vendas = new javax.swing.JPanel();
        clientes = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        produtos = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        compras = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        relatorios = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        fornecedores = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        usuarios = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaUsuario = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        nome = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        dataNascimento = new javax.swing.JTextField();
        try{ 
            javax.swing.text.MaskFormatter mask = new javax.swing.text.MaskFormatter("##/##/####");
            dataNascimento = new javax.swing.JFormattedTextField(mask);
        }
        catch (Exception e){
        }
        jLabel12 = new javax.swing.JLabel();
        documento = new javax.swing.JTextField();
        try{ 
            javax.swing.text.MaskFormatter mask = new javax.swing.text.MaskFormatter("###.###.###-##");
            documento = new javax.swing.JFormattedTextField(mask);
        }
        catch (Exception e){
        }
        jLabel13 = new javax.swing.JLabel();
        ddd = new javax.swing.JTextField();
        try{ 
            javax.swing.text.MaskFormatter mask = new javax.swing.text.MaskFormatter("(##)");
            ddd = new javax.swing.JFormattedTextField(mask);
        }
        catch (Exception e){
        }
        telefone = new javax.swing.JTextField();
        addTelefone = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        cep = new javax.swing.JTextField();
        try{ 
            javax.swing.text.MaskFormatter mask = new javax.swing.text.MaskFormatter("#####-###");
            cep = new javax.swing.JFormattedTextField(mask);
        }
        catch (Exception e){
        }
        jLabel16 = new javax.swing.JLabel();
        logradouro = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        numero = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        estados = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        usuario = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        senha = new javax.swing.JPasswordField();
        jLabel24 = new javax.swing.JLabel();
        acessos = new javax.swing.JComboBox<>();
        delete = new javax.swing.JButton();
        confirm = new javax.swing.JButton();
        labelTelefone2 = new javax.swing.JLabel();
        ddd2 = new javax.swing.JTextField();
        try{ 
            javax.swing.text.MaskFormatter mask = new javax.swing.text.MaskFormatter("(##)");
            ddd2 = new javax.swing.JFormattedTextField(mask);
        }
        catch (Exception e){
        }
        telefone2 = new javax.swing.JTextField();
        labelTelefone3 = new javax.swing.JLabel();
        ddd3 = new javax.swing.JTextField();
        try{ 
            javax.swing.text.MaskFormatter mask = new javax.swing.text.MaskFormatter("(##)");
            ddd3 = new javax.swing.JFormattedTextField(mask);
        }
        catch (Exception e){
        }
        telefone3 = new javax.swing.JTextField();
        bairro = new javax.swing.JTextField();
        cidade = new javax.swing.JTextField();
        btnRefresh = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        sexo = new javax.swing.JComboBox<>();
        checkSenha = new javax.swing.JCheckBox();
        delTel2 = new javax.swing.JButton();
        delTel3 = new javax.swing.JButton();
        mensagem = new javax.swing.JLabel();
        btnSair = new javax.swing.JButton();
        logado = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        textCodeBar = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        textFieldDescricaoSearch = new javax.swing.JTextField();
        ButtonSearchProduct = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/new_logo.png"))); // NOI18N

        btnVenda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cart.png"))); // NOI18N
        btnVenda.setText("Vendas");
        btnVenda.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnVenda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVendaMouseClicked(evt);
            }
        });
        btnVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVendaActionPerformed(evt);
            }
        });

        btnCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cliente.png"))); // NOI18N
        btnCliente.setText("Clientes");
        btnCliente.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnClienteMouseClicked(evt);
            }
        });
        btnCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClienteActionPerformed(evt);
            }
        });

        btnProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/clothes.png"))); // NOI18N
        btnProduto.setText("Produtos");
        btnProduto.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProdutoActionPerformed(evt);
            }
        });

        btnCompra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buying.png"))); // NOI18N
        btnCompra.setText("Compras");
        btnCompra.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompraActionPerformed(evt);
            }
        });

        btnRelatorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/report.png"))); // NOI18N
        btnRelatorio.setText("Relatórios");
        btnRelatorio.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRelatorioActionPerformed(evt);
            }
        });

        btnFornecedor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/truck.png"))); // NOI18N
        btnFornecedor.setText("Fornecedores");
        btnFornecedor.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnFornecedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFornecedorActionPerformed(evt);
            }
        });

        btnUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/users.png"))); // NOI18N
        btnUsuario.setText("Usuários");
        btnUsuario.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUsuarioActionPerformed(evt);
            }
        });

        eagles.setText("Eagle's Alliance © 2016");

        mainPanel.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout vendasLayout = new javax.swing.GroupLayout(vendas);
        vendas.setLayout(vendasLayout);
        vendasLayout.setHorizontalGroup(
            vendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1208, Short.MAX_VALUE)
        );
        vendasLayout.setVerticalGroup(
            vendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 553, Short.MAX_VALUE)
        );

        mainPanel.add(vendas, "vendas");

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel3.setText("PANEL CLIENTES - UNDER CONSTRUCTION...");

        javax.swing.GroupLayout clientesLayout = new javax.swing.GroupLayout(clientes);
        clientes.setLayout(clientesLayout);
        clientesLayout.setHorizontalGroup(
            clientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(675, Short.MAX_VALUE))
        );
        clientesLayout.setVerticalGroup(
            clientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(510, Short.MAX_VALUE))
        );

        mainPanel.add(clientes, "clientes");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel2.setText("PANEL PRODUTOS - UNDER CONSTRUCTION...");

        javax.swing.GroupLayout produtosLayout = new javax.swing.GroupLayout(produtos);
        produtos.setLayout(produtosLayout);
        produtosLayout.setHorizontalGroup(
            produtosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(produtosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(655, Short.MAX_VALUE))
        );
        produtosLayout.setVerticalGroup(
            produtosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(produtosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(510, Short.MAX_VALUE))
        );

        mainPanel.add(produtos, "produtos");

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel1.setText("PANEL COMPRAS - UNDER CONSTRUCTION...");

        javax.swing.GroupLayout comprasLayout = new javax.swing.GroupLayout(compras);
        compras.setLayout(comprasLayout);
        comprasLayout.setHorizontalGroup(
            comprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(comprasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(671, Short.MAX_VALUE))
        );
        comprasLayout.setVerticalGroup(
            comprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(comprasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(510, Short.MAX_VALUE))
        );

        mainPanel.add(compras, "compras");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel4.setText("PANEL RELATORIOS - UNDER CONSTRUCTION...");

        javax.swing.GroupLayout relatoriosLayout = new javax.swing.GroupLayout(relatorios);
        relatorios.setLayout(relatoriosLayout);
        relatoriosLayout.setHorizontalGroup(
            relatoriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(relatoriosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(638, Short.MAX_VALUE))
        );
        relatoriosLayout.setVerticalGroup(
            relatoriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(relatoriosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(510, Short.MAX_VALUE))
        );

        mainPanel.add(relatorios, "relatorios");

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel5.setText("PANEL FORNECEDORES - UNDER CONSTRUCTION...");

        javax.swing.GroupLayout fornecedoresLayout = new javax.swing.GroupLayout(fornecedores);
        fornecedores.setLayout(fornecedoresLayout);
        fornecedoresLayout.setHorizontalGroup(
            fornecedoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fornecedoresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addContainerGap(588, Short.MAX_VALUE))
        );
        fornecedoresLayout.setVerticalGroup(
            fornecedoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fornecedoresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addContainerGap(510, Short.MAX_VALUE))
        );

        mainPanel.add(fornecedores, "fornecedores");

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel8.setText("Usuários");

        tabelaUsuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Usuário", "Acesso"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaUsuarioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaUsuario);

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel6.setText("Dados Pessoais");

        jLabel9.setText("Nome");

        nome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nomeMouseClicked(evt);
            }
        });

        jLabel10.setText("E-Mail");

        jLabel11.setText("Data de Nascimento");

        jLabel12.setText("CPF");

        jLabel13.setText("Telefone");

        addTelefone.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add.png"))); // NOI18N
        addTelefone.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addTelefoneMouseClicked(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel14.setText("Endereço");

        jLabel15.setText("CEP");

        jLabel16.setText("Logradouro");

        jLabel17.setText("Nº");

        jLabel18.setText("Bairro");

        jLabel19.setText("Cidade");

        jLabel20.setText("Estado");

        jLabel21.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel21.setText("Dados de Acesso");

        jLabel22.setText("Usuário");

        jLabel23.setText("Senha");

        jLabel24.setText("Acesso");

        acessos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vendedor", "Administrador" }));

        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete.png"))); // NOI18N
        delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteMouseClicked(evt);
            }
        });

        confirm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/checked (1).png"))); // NOI18N
        confirm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                confirmMouseClicked(evt);
            }
        });

        labelTelefone2.setText("Telefone 2");

        labelTelefone3.setText("Telefone 3");

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/refresh-page-option.png"))); // NOI18N
        btnRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRefreshMouseClicked(evt);
            }
        });

        jLabel25.setText("Sexo");

        sexo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Masculino", "Feminino" }));

        checkSenha.setText("Cadastrar Nova Senha");
        checkSenha.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkSenhaMouseClicked(evt);
            }
        });

        delTel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete_icon.png"))); // NOI18N
        delTel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                delTel2MouseClicked(evt);
            }
        });

        delTel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete_icon.png"))); // NOI18N
        delTel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                delTel3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout usuariosLayout = new javax.swing.GroupLayout(usuarios);
        usuarios.setLayout(usuariosLayout);
        usuariosLayout.setHorizontalGroup(
            usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usuariosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(usuariosLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(usuariosLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(usuariosLayout.createSequentialGroup()
                                        .addComponent(btnRefresh)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(confirm)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(delete))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, usuariosLayout.createSequentialGroup()
                                        .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel18)
                                            .addComponent(jLabel15))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(usuariosLayout.createSequentialGroup()
                                                .addComponent(cep, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel16)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(logradouro)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel17)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(numero, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(usuariosLayout.createSequentialGroup()
                                                .addComponent(bairro, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel19)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cidade, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel20)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(estados, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, usuariosLayout.createSequentialGroup()
                                        .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(usuariosLayout.createSequentialGroup()
                                                .addComponent(jLabel22)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel23))
                                            .addComponent(jLabel21))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(usuariosLayout.createSequentialGroup()
                                                .addComponent(senha, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel24)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(acessos, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(usuariosLayout.createSequentialGroup()
                                                .addComponent(checkSenha)
                                                .addGap(0, 0, Short.MAX_VALUE))))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, usuariosLayout.createSequentialGroup()
                                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(usuariosLayout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(usuariosLayout.createSequentialGroup()
                                                .addComponent(jLabel11)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(dataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel12)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(documento, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(usuariosLayout.createSequentialGroup()
                                                .addComponent(jLabel9)
                                                .addGap(19, 19, 19)
                                                .addComponent(nome)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, usuariosLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel14)
                                        .addGap(292, 292, 292))
                                    .addGroup(usuariosLayout.createSequentialGroup()
                                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sexo, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(usuariosLayout.createSequentialGroup()
                                        .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(usuariosLayout.createSequentialGroup()
                                                .addComponent(labelTelefone3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(ddd3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(telefone3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, usuariosLayout.createSequentialGroup()
                                                .addGap(69, 69, 69)
                                                .addComponent(ddd, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(telefone, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, usuariosLayout.createSequentialGroup()
                                                .addComponent(labelTelefone2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(ddd2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(telefone2)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(addTelefone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(delTel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(delTel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(usuariosLayout.createSequentialGroup()
                                        .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel13))
                                        .addGap(27, 27, 27)
                                        .addComponent(email)))
                                .addGap(23, 23, 23)))))
                .addGap(65, 65, 65))
        );
        usuariosLayout.setVerticalGroup(
            usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usuariosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(usuariosLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(dataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(documento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)
                            .addComponent(ddd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(telefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addTelefone))
                        .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(usuariosLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelTelefone2)
                                    .addComponent(ddd2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(telefone2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel25)
                                    .addComponent(sexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(delTel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(usuariosLayout.createSequentialGroup()
                                        .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(labelTelefone3)
                                            .addComponent(ddd3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(telefone3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel14))
                                    .addComponent(delTel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(cep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16)
                                    .addComponent(logradouro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17)
                                    .addComponent(numero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel19)
                                        .addComponent(jLabel18)
                                        .addComponent(bairro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(estados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel20)))
                                .addGap(18, 18, 18)
                                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel21)
                                    .addComponent(checkSenha))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel22)
                                    .addComponent(usuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel23)
                                    .addComponent(senha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel24)
                                    .addComponent(acessos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(44, 44, 44)
                                .addGroup(usuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(delete)
                                    .addComponent(confirm)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, usuariosLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRefresh))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(142, Short.MAX_VALUE))
        );

        mainPanel.add(usuarios, "usuarios");

        mensagem.setBackground(new java.awt.Color(255, 255, 255));
        mensagem.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        mensagem.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        btnSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logout.png"))); // NOI18N
        btnSair.setText("Sair");
        btnSair.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSair.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSairMouseClicked(evt);
            }
        });

        logado.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Descrição", "Valor Unitário", "Valor Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(productTable);

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel7.setText("Código");
        jLabel7.setToolTipText("");

        jLabel27.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel27.setText("Descrição");
        jLabel27.setToolTipText("");

        ButtonSearchProduct.setText("Buscar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(logo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mensagem, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnVenda, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCliente, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnProduto, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCompra, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRelatorio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUsuario, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnFornecedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSair, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel27)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldDescricaoSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ButtonSearchProduct, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addGap(22, 22, 22)
                                    .addComponent(textCodeBar, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(400, 400, 400)
                        .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(eagles)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(logo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mensagem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnVenda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCliente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnProduto)
                        .addGap(18, 18, 18)
                        .addComponent(btnCompra)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRelatorio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFornecedor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUsuario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSair)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(textCodeBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel27)
                            .addComponent(textFieldDescricaoSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ButtonSearchProduct)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eagles)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVendaActionPerformed
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "vendas");
    }//GEN-LAST:event_btnVendaActionPerformed

    private void btnClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClienteActionPerformed
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "clientes");
    }//GEN-LAST:event_btnClienteActionPerformed

    private void btnProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProdutoActionPerformed
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "produtos");
    }//GEN-LAST:event_btnProdutoActionPerformed

    private void btnCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompraActionPerformed
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "compras");
    }//GEN-LAST:event_btnCompraActionPerformed

    private void btnRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRelatorioActionPerformed
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "relatorios");
    }//GEN-LAST:event_btnRelatorioActionPerformed

    private void btnFornecedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFornecedorActionPerformed
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "fornecedores");
    }//GEN-LAST:event_btnFornecedorActionPerformed

    private void btnUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUsuarioActionPerformed
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "usuarios");
    }//GEN-LAST:event_btnUsuarioActionPerformed

    private void btnVendaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVendaMouseClicked
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "vendas");
    }//GEN-LAST:event_btnVendaMouseClicked

    private void btnClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClienteMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnClienteMouseClicked

    private void addTelefoneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addTelefoneMouseClicked
        
        if(labelTelefone2.isVisible()){
            labelTelefone3.setVisible(true);
            ddd3.setVisible(true);
            telefone3.setVisible(true);
            delTel3.setVisible(true);
        }
        else{
            labelTelefone2.setVisible(true);
            ddd2.setVisible(true);
            telefone2.setVisible(true);
            delTel2.setVisible(true);
        }
    }//GEN-LAST:event_addTelefoneMouseClicked

   
    private void confirmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmMouseClicked
        
        Validation validate = new Validation();

        if(validate.validateNome(nome.getText())){
            if(validate.validateEmail(email.getText())){
                if(validate.validateDataNascimento(dataNascimento.getText())){
                    if(validate.validateCpf(documento.getText())){
                        if(validate.validateDdd(ddd.getText())){
                            if(validate.validateTelefone(telefone.getText())){
                                if(validate.validateCep(cep.getText())){
                                    if(validate.validateEndereco(logradouro.getText())){
                                        if(validate.validateEndereco(bairro.getText())){
                                            if(validate.validateEndereco(cidade.getText())){
                                                if(validate.validateNumero(numero.getText())){
                                                    if(validate.validateUsuario(usuario.getText())){
                                                        if(!checkSenha.isSelected()){
                                                            senha.setText("tempsenha");
                                                        }
                                                        if(validate.validateSenha(senha.getText())){
                                                            if(validate.validateCombo(acessos.getSelectedIndex())){
                                                                
                                                                List<Telefone> telefones = new ArrayList<>();
                                                                
                                                                if(telefone.getText().length() == 8){
                                                                    telefones.add(new Telefone(ddd.getText(), telefone.getText(), TipoTelefone.Fixo));
                                                                }
                                                                else{
                                                                    telefones.add(new Telefone(ddd.getText(), telefone.getText(), TipoTelefone.Celular));
                                                                }
                                                                
                                                                if(ddd2.isVisible() && validate.validateDdd(ddd2.getText())){
                                                                    if(validate.validateTelefone(telefone2.getText())){
                                                                        if(telefone2.getText().length() == 8){
                                                                            telefones.add(new Telefone(ddd2.getText(), telefone2.getText(), TipoTelefone.Fixo));
                                                                        }
                                                                        else{
                                                                            telefones.add(new Telefone(ddd2.getText(), telefone2.getText(), TipoTelefone.Celular));
                                                                        }
                                                                    }
                                                                }
                                                                
                                                                if(ddd3.isVisible() && validate.validateDdd(ddd3.getText())){
                                                                    if(validate.validateTelefone(telefone3.getText())){
                                                                        if(telefone3.getText().length() == 8){
                                                                            telefones.add(new Telefone(ddd3.getText(), telefone3.getText(), TipoTelefone.Fixo));
                                                                        }
                                                                        else{
                                                                            telefones.add(new Telefone(ddd3.getText(), telefone3.getText(), TipoTelefone.Celular));
                                                                        }
                                                                    }
                                                                }
                                                                
                                                                Calendar c = Calendar.getInstance();
                                                                int day   = Integer.parseInt(dataNascimento.getText().substring(0, 2));
                                                                int month = Integer.parseInt(dataNascimento.getText().substring(3, 5));
                                                                int year  = Integer.parseInt(dataNascimento.getText().substring(6, 10));
                                                                c.set(year, (month-1), day);
                                                                String tipoAcesso = acessos.getSelectedItem().toString().substring(0, 1);
                                                                if(!delete.isVisible()){
                                                                    /*Persistence With Hibernate - Good Luck For Us!!!!*/
                                                                    
                                                                    EstadoDAO      estDAO = new EstadoDAO();
                                                                    CidadeDAO      cidDAO = new CidadeDAO();
                                                                    BairroDAO      baiDAO = new BairroDAO();
                                                                    EnderecoDAO    endDAO = new EnderecoDAO();
                                                                    PessoaDAO      pesDAO = new PessoaDAO();
                                                                    DocumentoDAO   docDAO = new DocumentoDAO();
                                                                    TelefoneDAO    telDAO = new TelefoneDAO();

                                                                    Cidade objCidade = null;
                                                                    for(int i = 0; i < cidDAO.findAll().size(); i++){
                                                                        if(cidDAO.findAll().get(i).getNome().equals(cidade.getText())){
                                                                            objCidade = cidDAO.findAll().get(i);
                                                                            break;
                                                                        }
                                                                    }
                                                                    
                                                                    if(objCidade == null){
                                                                        objCidade = new Cidade(cidade.getText());
                                                                    }
                                                                    
                                                                    Bairro objBairro = null;
                                                                    for(int i = 0; i < baiDAO.findAll().size(); i++){
                                                                        if(baiDAO.findAll().get(i).getNome().equals(bairro.getText())){
                                                                            objBairro = baiDAO.findAll().get(i);
                                                                            break;
                                                                        }
                                                                    }
                                                                    if(objBairro == null){
                                                                        objBairro = new Bairro(bairro.getText());
                                                                    }
                                                                    
                                                                    
                                                                    Endereco objEndereco       = new Endereco   (logradouro.getText(), numero.getText(), cep.getText());
                                                                    Documento objDocumento     = new Documento  (documento.getText(), TipoDocumento.CPF);
                                                                    
                                                                    
                                                                    /*Hex para Senha*/
                                                                    HashSha hash = new HashSha(senha.getText());
                                                                    String hashSenha = "";
                                                                    try {
                                                                        hashSenha = hash.hashSenha();
                                                                    } catch (NoSuchAlgorithmException ex) {
                                                                        Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                                                                    } catch (UnsupportedEncodingException ex) {
                                                                        Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                                                                    }
                                                                    
                                                                    Funcionario objFuncionario = new Funcionario(usuario.getText(), hashSenha, Acesso.valueOf(acessos.getSelectedItem().toString()), nome.getText(), email.getText(), c, Sexo.valueOf(sexo.getSelectedItem().toString()));
                                                                    
                                                                    FuncionarioDAO dao = new FuncionarioDAO();
                                                                    EstadoDAO est = new EstadoDAO();
                                                                    List<Estado> list = est.findByUf(estados.getSelectedItem().toString());
                                                                    

                                                                    for(int i = 0; i < list.size(); i++){
                                                                        list.get(i).addCidade(objCidade);
                                                                        objCidade.addBairro(objBairro);
                                                                        objBairro.addEndereco(objEndereco);
                                                                        objFuncionario.setEndereco(objEndereco);
                                                                        objFuncionario.setTelefone(telefones);
                                                                        objFuncionario.setDocumento(objDocumento);

                                                                        dao.merge(objFuncionario);
                                                                    }
                                                                    
                                                                    acao = "insert";
                                                                    Mensagem msg = new Mensagem();
                                                                    Thread mensagemT = new Thread(msg);
                                                                    mensagemT.start();
                                                                    
                                                                    limpaCampos();

                                                                    carregaUsuarios();
                                                                }
                                                                else{
                                                                    /*Atualiza os Dados*/
                                                                    FuncionarioDAO dao = new FuncionarioDAO();
                                                                    CidadeDAO      cidDAO = new CidadeDAO();
                                                                    BairroDAO      baiDAO = new BairroDAO();
                                                                    
                                                                    Long id = Long.parseLong(
                                                                            (String) tabelaUsuario.getValueAt(tabelaUsuario.getSelectedRow(), 0)
                                                                        );
                                                                    
                                                                    Funcionario funcionario = dao.getById(id);
                                                                    
                                                                    funcionario.setNome(nome.getText());
                                                                    funcionario.setEmail(email.getText());
                                                                    funcionario.setDataNascimento(c);
                                                                    funcionario.getDocumento().setNumero(documento.getText());
                                                                    
                                                                    
                                                                    if(funcionario.getTelefones().size() == 1){
                                                                        if(ddd2.isVisible() && validate.validateDdd(ddd2.getText())){
                                                                            if(validate.validateTelefone(telefone2.getText())){
                                                                                funcionario.getTelefones().get(0).setDdd(ddd.getText());
                                                                                funcionario.getTelefones().get(0).setNumero(telefone.getText());
                                                                                
                                                                                if(ddd2.isVisible() && validate.validateDdd(ddd2.getText())){
                                                                                    if(validate.validateTelefone(telefone2.getText())){
                                                                                        if(telefone2.getText().length() == 8){
                                                                                            funcionario.addTelefone(new Telefone(ddd2.getText(), telefone2.getText(), TipoTelefone.Fixo));
                                                                                        }
                                                                                        else{
                                                                                            funcionario.addTelefone(new Telefone(ddd2.getText(), telefone2.getText(), TipoTelefone.Celular));
                                                                                        }
                                                                                    }
                                                                                }

                                                                                if(ddd3.isVisible() && validate.validateDdd(ddd3.getText())){
                                                                                    if(validate.validateTelefone(telefone3.getText())){
                                                                                        if(telefone3.getText().length() == 8){
                                                                                            funcionario.addTelefone(new Telefone(ddd3.getText(), telefone3.getText(), TipoTelefone.Fixo));
                                                                                        }
                                                                                        else{
                                                                                            funcionario.addTelefone(new Telefone(ddd3.getText(), telefone3.getText(), TipoTelefone.Celular));
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } 
                                                                    }
                                                                    
                                                                    if(funcionario.getTelefones().size() == 2){
                                                                        if(ddd2.isVisible() && validate.validateDdd(ddd2.getText())){
                                                                            if(validate.validateTelefone(telefone2.getText())){
                                                                                funcionario.getTelefones().get(0).setDdd(ddd.getText());
                                                                                funcionario.getTelefones().get(0).setNumero(telefone.getText());
                                                                                
                                                                                funcionario.getTelefones().get(1).setDdd(ddd2.getText());
                                                                                funcionario.getTelefones().get(1).setNumero(telefone2.getText());
                                                                                
                                                                                if(ddd3.isVisible() && validate.validateDdd(ddd3.getText())){
                                                                                    if(validate.validateTelefone(telefone3.getText())){
                                                                                        if(telefone3.getText().length() == 8){
                                                                                            funcionario.addTelefone(new Telefone(ddd3.getText(), telefone3.getText(), TipoTelefone.Fixo));
                                                                                        }
                                                                                        else{
                                                                                            funcionario.addTelefone(new Telefone(ddd3.getText(), telefone3.getText(), TipoTelefone.Celular));
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } 
                                                                    }
                                                                    
                                                                    if(funcionario.getTelefones().size() == 3){
                                                                        if(ddd2.isVisible() && validate.validateDdd(ddd2.getText())){
                                                                            if(validate.validateTelefone(telefone2.getText())){
                                                                                funcionario.getTelefones().get(0).setDdd(ddd.getText());
                                                                                funcionario.getTelefones().get(0).setNumero(telefone.getText());
                                                                                
                                                                                funcionario.getTelefones().get(1).setDdd(ddd2.getText());
                                                                                funcionario.getTelefones().get(1).setNumero(telefone2.getText());
                                                                                
                                                                                funcionario.getTelefones().get(2).setDdd(ddd3.getText());
                                                                                funcionario.getTelefones().get(2).setNumero(telefone3.getText());
                                                                            }
                                                                        } 
                                                                    }
                                                                    
                                                                    funcionario.getEndereco().setLogradouro(logradouro.getText());
                                                                    funcionario.getEndereco().setNumero(numero.getText());
                                                                    funcionario.getEndereco().setCep(cep.getText());
                                                                    
                                                                    boolean existeBairro = false;
                                                                    Bairro exsBairro = null;
                                                                    for(int i = 0; i < baiDAO.findAll().size(); i++){
                                                                        
                                                                        if(baiDAO.findAll().get(i).getNome().equals(bairro.getText())){
                                                                            existeBairro = true;
                                                                            exsBairro = baiDAO.findAll().get(i);
                                                                            break;
                                                                        } 
                                                                    }
                                                                    
                                                                    if(existeBairro){
                                                                        exsBairro.addEndereco(funcionario.getEndereco());
                                                                    }else{
                                                                        new Bairro(bairro.getText()).addEndereco(funcionario.getEndereco());
                                                                    }
                                                                    
                                                                    boolean existeCidade = false;
                                                                    Cidade exsCidade = null;
                                                                    for(int i = 0; i < cidDAO.findAll().size(); i++){
                                                                        
                                                                        if(cidDAO.findAll().get(i).getNome().equals(cidade.getText())){
                                                                            existeCidade = true;
                                                                            exsCidade = cidDAO.findAll().get(i);
                                                                            break;
                                                                        } 
                                                                    }
                                                                    
                                                                    if(existeCidade){
                                                                        exsCidade.addBairro(funcionario.getEndereco().getBairro());
                                                                    }else{
                                                                        new Cidade(cidade.getText()).addBairro(funcionario.getEndereco().getBairro());
                                                                        
                                                                    }
                                                                    
                                                                    EstadoDAO      estDao = new EstadoDAO();
                                                                    Estado atualEstado = null;
                                                                    List<Estado> list = estDao.findByUf(estados.getSelectedItem().toString());
                                                                    for(int i = 0; i < list.size(); i++){
                                                                        atualEstado = list.get(i);
                                                                    }
                                                                    
                                                                    atualEstado.addCidade(funcionario.getEndereco().getBairro().getCidade());
                                                                    
                                                                    //funcionario.getEndereco().getBairro().setNome(bairro.getText());
                                                                    //funcionario.getEndereco().getBairro().getCidade().setNome(cidade.getText());
                                                                    funcionario.setDataNascimento(c);
                                                                    funcionario.setUsuario(usuario.getText());
                                                                    
                                                                    if(senha.isEditable()){
                                                                        /*Hex para Senha*/
                                                                        HashSha hash = new HashSha(senha.getText());
                                                                        String hashSenha = "";
                                                                        
                                                                        try {
                                                                            hashSenha = hash.hashSenha();
                                                                            funcionario.setSenha(hashSenha);
                                                                        } catch (NoSuchAlgorithmException ex) {
                                                                            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                                                                        } catch (UnsupportedEncodingException ex) {
                                                                            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                                                                        }
                                                                    }
                                                                    
                                                                    senha.setText("tempsenha");
                                                                    
                                                                    funcionario.setAcesso(Acesso.valueOf(acessos.getSelectedItem().toString()));
                                                                    funcionario.setSexo(Sexo.valueOf(sexo.getSelectedItem().toString()));
                                                                    
                                                                    dao.merge(funcionario);
                                                                    
                                                                    acao = "edit";
                                                                    Mensagem msg = new Mensagem();
                                                                    Thread mensagemT = new Thread(msg);
                                                                    mensagemT.start();
                                                                    
                                                                    limpaCampos();
                                                                    carregaUsuarios();
                                                                }
                                                            }
                                                            else{
                                                                JOptionPane.showMessageDialog(null, "Selcione o tipo de acesso");
                                                                acessos.requestFocus();
                                                            }
                                                        }
                                                        else{
                                                            JOptionPane.showMessageDialog(null, "Senha Requerida");
                                                            senha.requestFocus();
                                                        }
                                                    }
                                                    else{
                                                        JOptionPane.showMessageDialog(null, "Usuário Requerido");
                                                        usuario.requestFocus();
                                                    }
                                                }
                                                else{
                                                    JOptionPane.showMessageDialog(null, "Número Requerido");
                                                    numero.requestFocus();
                                                }
                                            }
                                            else{
                                                JOptionPane.showMessageDialog(null, "Cidade Requerido");
                                                cidade.requestFocus();
                                            }
                                        }
                                        else{
                                            JOptionPane.showMessageDialog(null, "Bairro Requerido");
                                            bairro.requestFocus();
                                        }
                                    }
                                    else{
                                        JOptionPane.showMessageDialog(null, "Logradouro Requerido");
                                        logradouro.requestFocus();
                                    }
                                }
                                else{
                                    JOptionPane.showMessageDialog(null, "Cep Requerido");
                                    cep.requestFocus();
                                }
                            }
                            else{
                                JOptionPane.showMessageDialog(null, "Telefone Requerido");
                                telefone.requestFocus();
                            }
                        }else{
                            JOptionPane.showMessageDialog(null, "DDD Requerido");
                            ddd.requestFocus();
                        }
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "CPF Requerido");
                        documento.requestFocus();
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "Data de Nascimento Requerido");
                    dataNascimento.requestFocus();
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "E-mail Requerido");
                email.requestFocus();
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Nome Requerido");
            nome.requestFocus();
        }
    }//GEN-LAST:event_confirmMouseClicked

    public void limpaCampos() {
        nome.setText(null);
        email.setText(null);
        dataNascimento.setText(null);
        documento.setText(null);
        ddd.setText(null);
        telefone.setText(null);
        cep.setText(null);
        logradouro.setText(null);
        bairro.setText(null);
        cidade.setText(null);
        numero.setText(null);
        usuario.setText(null);
        senha.setText(null);
        tabelaUsuario.clearSelection();
        ddd2.setText(null);
        telefone2.setText(null);
        ddd3.setText(null);
        telefone3.setText(null);
        
        labelTelefone2.setVisible(false);
        ddd2.setVisible(false);
        telefone2.setVisible(false);
        delTel2.setVisible(false);
        labelTelefone3.setVisible(false);
        ddd3.setVisible(false);
        telefone3.setVisible(false);
        delTel3.setVisible(false);
        
        checkSenha.setVisible(false);
        senha.setEnabled(true);
        senha.setEditable(true);
    }

    private void nomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nomeMouseClicked
        nome.setBackground(Color.white);
    }//GEN-LAST:event_nomeMouseClicked

    private void tabelaUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaUsuarioMouseClicked
        preencheFormulario();
    }//GEN-LAST:event_tabelaUsuarioMouseClicked

    public void preencheFormulario() throws NumberFormatException {
        DecimalFormat df = new DecimalFormat("00");
        DecimalFormat dff = new DecimalFormat("0000");
        Long id = Long.parseLong((String) tabelaUsuario.getValueAt(tabelaUsuario.getSelectedRow(), 0));
        FuncionarioDAO dao = new FuncionarioDAO();
        Funcionario funcionario = dao.getById(id);
        
        checkSenha.setVisible(true);
        checkSenha.setSelected(false);
        senha.setEditable(false);
        senha.setEnabled(false);
        
        
        nome.setText(funcionario.getNome());
        email.setText(funcionario.getEmail());
        
        String dia = (df.format(funcionario.getDataNascimento().get(Calendar.DAY_OF_MONTH)));
        String mes = (df.format(funcionario.getDataNascimento().get(Calendar.MONTH)+1));
        String ano = dff.format(funcionario.getDataNascimento().get(Calendar.YEAR));
        
        dataNascimento.setText(dia+"/"+mes+"/"+ano);
        documento.setText(funcionario.getDocumento().getNumero());
        
        if(funcionario.getTelefones().size() == 1){
            labelTelefone2.setVisible(false);
            ddd2.setVisible(false);
            ddd2.setText(null);
            telefone2.setVisible(false);
            telefone2.setText(null);
            delTel2.setVisible(false);
            
            labelTelefone3.setVisible(false);
            ddd3.setVisible(false);
            ddd3.setText(null);
            telefone3.setVisible(false);
            telefone3.setText(null);
            delTel3.setVisible(false);
            
            ddd.setText(funcionario.getTelefones().get(0).getDdd());
            telefone.setText(funcionario.getTelefones().get(0).getNumero());
        }
        
        
        if(funcionario.getTelefones().size() == 2){
            labelTelefone2.setVisible(true);
            ddd2.setVisible(true);
            telefone2.setVisible(true);
            delTel2.setVisible(true);
            
            labelTelefone3.setVisible(false);
            ddd3.setVisible(false);
            ddd3.setText(null);
            telefone3.setVisible(false);
            telefone3.setText(null);
            delTel3.setVisible(false);
            
            ddd.setText(funcionario.getTelefones().get(0).getDdd());
            telefone.setText(funcionario.getTelefones().get(0).getNumero());
            ddd2.setText(funcionario.getTelefones().get(1).getDdd());
            telefone2.setText(funcionario.getTelefones().get(1).getNumero());
        }
        
        
        if(funcionario.getTelefones().size() == 3){
            labelTelefone2.setVisible(true);
            ddd2.setVisible(true);
            telefone2.setVisible(true);
            delTel2.setVisible(true);
            
            ddd2.setText(funcionario.getTelefones().get(1).getDdd());
            telefone2.setText(funcionario.getTelefones().get(1).getNumero());
            
            labelTelefone3.setVisible(true);
            ddd3.setVisible(true);
            telefone3.setVisible(true);
            delTel3.setVisible(true);
            
            ddd.setText(funcionario.getTelefones().get(0).getDdd());
            telefone.setText(funcionario.getTelefones().get(0).getNumero());
            ddd2.setText(funcionario.getTelefones().get(1).getDdd());
            telefone2.setText(funcionario.getTelefones().get(1).getNumero());
            ddd3.setText(funcionario.getTelefones().get(2).getDdd());
            telefone3.setText(funcionario.getTelefones().get(2).getNumero());
        }
        
        
        
        
        cep.setText(funcionario.getEndereco().getCep());
        logradouro.setText(funcionario.getEndereco().getLogradouro());
        numero.setText(funcionario.getEndereco().getNumero());
        bairro.setText(funcionario.getEndereco().getBairro().getNome());
        cidade.setText(funcionario.getEndereco().getBairro().getCidade().getNome());
        usuario.setText(funcionario.getUsuario());
        
        
        
        senha.setText(null);
        
        
        acessos.setSelectedItem(funcionario.getAcesso().toString());
        
        estados.setSelectedItem(funcionario.getEndereco().getBairro().getCidade().getEstado().getUf());
        sexo.setSelectedItem(funcionario.getSexo().toString());
        
        delete.setVisible(true);
        confirm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/edit.png")));
    }

    private void btnRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRefreshMouseClicked
        limpaCampos();
        delete.setVisible(false);
        confirm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/checked (1).png")));
    }//GEN-LAST:event_btnRefreshMouseClicked

    private void deleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteMouseClicked
        FuncionarioDAO dao = new FuncionarioDAO();
        Long id = Long.parseLong(
                (String) tabelaUsuario.getValueAt(tabelaUsuario.getSelectedRow(), 0)
            );
        
        dao.removeById(id);
        acao = "delete";
        Mensagem msg = new Mensagem();
        Thread mensagem = new Thread(msg);
        mensagem.start();
        limpaCampos();
        carregaUsuarios();
    }//GEN-LAST:event_deleteMouseClicked

    private void btnSairMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSairMouseClicked
        this.dispose();
        new Login().setVisible(true);
    }//GEN-LAST:event_btnSairMouseClicked

    private void checkSenhaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkSenhaMouseClicked
        if(checkSenha.isSelected()){
            senha.setEnabled(true);
            senha.setEditable(true);
        }
        else{
            senha.setEnabled(false);
            senha.setEditable(false);
        }
    }//GEN-LAST:event_checkSenhaMouseClicked

    private void delTel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_delTel2MouseClicked
       Validation valida = new Validation();
        if(tabelaUsuario.getSelectedRow() > -1){
           if(valida.validateDdd(ddd2.getText()) && valida.validateTelefone(telefone2.getText())){
               TelefoneDAO dao = new TelefoneDAO();
               PessoaDAO pes = new PessoaDAO();
               Long id = Long.parseLong((String) tabelaUsuario.getValueAt(tabelaUsuario.getSelectedRow(), 0));
               
               Pessoa pessoa = pes.getById(id);
               
               for(int i = 0; i < pessoa.getTelefones().size(); i++){
                   if(pessoa.getTelefones().get(i).getDdd().equals(ddd2.getText())
                        && pessoa.getTelefones().get(i).getNumero().equals(telefone2.getText())){
                       dao.removeById(pessoa.getTelefones().get(i).getIdTelefone());
                   }
               }
               
               preencheFormulario();
           }
       }
        labelTelefone2.setVisible(false);
        ddd2.setVisible(false);
        ddd2.setText(null);
        telefone2.setVisible(false);
        telefone2.setText(null);
        delTel2.setVisible(false);
        
    }//GEN-LAST:event_delTel2MouseClicked

    private void delTel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_delTel3MouseClicked
        Validation valida = new Validation();
        if(tabelaUsuario.getSelectedRow() > -1){
           if(valida.validateDdd(ddd3.getText()) && valida.validateTelefone(telefone3.getText())){
               TelefoneDAO dao = new TelefoneDAO();
               PessoaDAO pes = new PessoaDAO();
               Long id = Long.parseLong((String) tabelaUsuario.getValueAt(tabelaUsuario.getSelectedRow(), 0));
               
               Pessoa pessoa = pes.getById(id);
               
               
               for(int i = 0; i < pessoa.getTelefones().size(); i++){
                   if(pessoa.getTelefones().get(i).getDdd().equals(ddd3.getText())
                        && pessoa.getTelefones().get(i).getNumero().equals(telefone3.getText())){
                       dao.removeById(pessoa.getTelefones().get(i).getIdTelefone());
                   }
               }
               
               preencheFormulario();
           }
       }
        labelTelefone3.setVisible(false);
        ddd3.setVisible(false);
        ddd3.setText(null);
        telefone3.setVisible(false);
        telefone3.setText(null);
        delTel3.setVisible(false);
       
    }//GEN-LAST:event_delTel3MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonSearchProduct;
    private javax.swing.JComboBox<String> acessos;
    private javax.swing.JButton addTelefone;
    private javax.swing.JTextField bairro;
    private javax.swing.JButton btnCliente;
    private javax.swing.JButton btnCompra;
    private javax.swing.JButton btnFornecedor;
    private javax.swing.JButton btnProduto;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRelatorio;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnUsuario;
    private javax.swing.JButton btnVenda;
    private javax.swing.JTextField cep;
    private javax.swing.JCheckBox checkSenha;
    private javax.swing.JTextField cidade;
    private javax.swing.JPanel clientes;
    private javax.swing.JPanel compras;
    private javax.swing.JButton confirm;
    private javax.swing.JTextField dataNascimento;
    private javax.swing.JTextField ddd;
    private javax.swing.JTextField ddd2;
    private javax.swing.JTextField ddd3;
    private javax.swing.JButton delTel2;
    private javax.swing.JButton delTel3;
    private javax.swing.JButton delete;
    private javax.swing.JTextField documento;
    private javax.swing.JLabel eagles;
    private javax.swing.JTextField email;
    private javax.swing.JComboBox<String> estados;
    private javax.swing.JPanel fornecedores;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelTelefone2;
    private javax.swing.JLabel labelTelefone3;
    private javax.swing.JLabel logado;
    private javax.swing.JLabel logo;
    private javax.swing.JTextField logradouro;
    private javax.swing.JPanel mainPanel;
    public static javax.swing.JLabel mensagem;
    private javax.swing.JTextField nome;
    private javax.swing.JTextField numero;
    private javax.swing.JTable productTable;
    private javax.swing.JPanel produtos;
    private javax.swing.JPanel relatorios;
    private javax.swing.JPasswordField senha;
    private javax.swing.JComboBox<String> sexo;
    private javax.swing.JTable tabelaUsuario;
    private javax.swing.JTextField telefone;
    private javax.swing.JTextField telefone2;
    private javax.swing.JTextField telefone3;
    private javax.swing.JTextField textCodeBar;
    private javax.swing.JTextField textFieldDescricaoSearch;
    private javax.swing.JTextField usuario;
    private javax.swing.JPanel usuarios;
    private javax.swing.JPanel vendas;
    // End of variables declaration//GEN-END:variables
}
